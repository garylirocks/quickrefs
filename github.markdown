# GitHub

- [GitHub Flow](#github-flow)
- [Apps vs. OAuth Apps](#apps-vs-oauth-apps)
- [Actions](#actions)
  - [Action definition](#action-definition)
  - [Workflow file](#workflow-file)
  - [GitHub Script](#github-script)

## GitHub Flow

[Understanding the GitHub flow Â· GitHub Guides](https://guides.github.com/introduction/flow/)

![GitHub Flow](./images/github_github-flow.png)

Comparing with the Git Flow, GitHub Flow is more lightweight, and more suitable for CI/CD.

One Rule: **Anything in the `main` branch is always deployable**

1. Create a branch from `main`.
2. Add commits.
3. Open a pull request.

  - The purpose is to initiate discussion
  - You can open a pull request at **any point**, not necessarily when you are ready for review, you could use it to share screenshots/ideas, ask for help/advice

4. Make changes on your branch as needed, your pull request will update automatically.
5. Deploy
  - Once your PR has been reviewed and passed tests, you can deploy it to production, if it causes issues, roll it back by deploying the existing main branch
  - There are different deployment strategies, for some, it's better to deploy to a specifically provisioned testing environment, for others, it's better to deploy directly to production
6. Merge the pull request
  - Pull requests preserve a record of historical changes to your code
  - By using some phrases like `Closes #32` in your PR text, issue 32 will be closed automatically when you merge your PR


## Apps vs. OAuth Apps

 - Apps act as themselves, they are mostly bots, helping you automate some tasks, such as requesting more info for an issue if there's no description.

 - OAuth Apps act as the user who authorized them.


## Actions

![Workflow components](./images/github_actions-workflow-components.png)

There are two components:

- actions

  Each action has its own purpose, defined with a YAML file.

  Two types:

  - Container actions
  - JavaScript actions

- workflows

  A workflow contains jobs, a job contains steps, each step corresponds to an action. Actions can be defined in the same repository, in another repo, or in a published Docker image.


### Action definition

```yaml
name: "Hello Actions"
description: "Greet someone"
author: "octocat@github.com"

inputs:
    MY_NAME:                  # a variable that needs be set in workflow
    description: "Who to greet"
    required: true
    default: "World"

runs:
    using: "docker"
    image: "Dockerfile"       # path to docker image file

branding:                     # metadata for GitHub Marketplace
    icon: "mic"
    color: "purple"
```

### Workflow file

- Workflow files should be in `.github/workflows/`
  - To promote consistency, an organization can have workflow templates in a `.github` repo, any repo in the org has access to it
- A workflow must have at least one job
- A job is run by a runner, which can be GitHub-hosted or self-hosted, and the job can run on a machine or a container

```yaml
name: A workflow for my Hello World file
on: push                              # trigger
jobs:
    build:                            # job id
      name: Hello world action
      runs-on: ubuntu-latest          # GitHub-hosted runner
      steps:
          - uses: actions/checkout@v1 # first step: action defined in another repo
          - uses: ./action-a          # another step: action defined in same repo
            with:
                MY_NAME: "Mona"       # input required by the action
```

Triggers:

```yaml
on: push

# or an array
on: [push, pull_request]

# or a map
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created

# or by a schedule
on:
  schedule:
    - cron:  '0 3 * * SUN'

# or by manual or REST API
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

# or by webhook events
on:
  check_run:
    types: [rerequested, requested_action]
```

Both jobs and steps can have `if` conditions:

```yaml
name: CI
on: push
jobs:
  prod-check:
    if: github.ref == 'refs/heads/main' # job condition
    runs-on: ubuntu-latest
    steps:
      ...
```

```yaml
name: CI
on: pull_request
jobs:
  job1:
    if: contains(github.event.pull_request.labels.*.name, 'peacock')
    # get an array of label names like ["bug", "stage", "peacock"] of the pull request that triggered this job
    runs-on: ubuntu-latest
    steps:
      - name: Frist step
      - name: Another step
        if: contains(github.event.issue.labels.*.name, 'bug') # step condition
        run: |
          echo "A bug report"
      ...
```

Artifact storage (upload artifacts generated by `build` job and download in `test` job):
  - Jobs run in parallel, unless configured otherwise
  - Use `needs` to configure dependencies

```yaml
build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: npm install and build webpack
        run: |
          npm install
          npm run build
      - uses: actions/upload-artifact@master
        with:
          name: webpack artifacts
          path: public/

test:
    needs: build                                # this job depends on another job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: webpack artifacts
          path: public
```

Multiple environments for a job:

```yaml
test:
  runs-on: ubuntu-latest
  strategy:                                       # run in multiple OSes and Node version
    matrix:
      os: [ubuntu-lastest, windows-2016]
      node-version: [8.x, 10.x]
  steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, and test
      run: |
        npm install
        npm test
      env:
        CI: true
```

### GitHub Script

It is a special action (`actions/github-script`) that allows using octokit/rest.js directly in a workflow file.

- `octokit`: official collection of GitHub API clients
- `rest.js`: included in octokit, JavaScript client for GitHub rest API

GitHub Script provides these variables:

- `github`: rest.js client
- `context`: workflow context object

Example:

```yaml
# add a comment to newly opened issues
name: Learning GitHub Script

on:
  issues:
    types: [opened]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "ðŸŽ‰ You've created this issue comment using GitHub Script!!!"
            })
```
